package yeninesilarge.calenderapp;
/*
     Enes Kamil YILMAZ
    FSM Vakıf University
    Computer Engineering
        3rd Grade
        1521221039
                        */
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class EventPopUp extends javax.swing.JFrame {

    boolean allday;
    static boolean isOpen;
    String timefrom = "-", timeto = "-";
    String hourf, minf, hour2, min2;
    static final String LINE_SEP = System.getProperty("line.separator");

    public EventPopUp() {
        initComponents();
        System.out.println(LINE_SEP);
        isOpen = true;
        this.setTitle("                 Add Agenda");
        //bu frame kapandığında ana frame in kapanmasını önler.
        this.setDefaultCloseOperation(this.DISPOSE_ON_CLOSE);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                isOpen = false;
            }
        });
        
        chDate.setText("Choosen Date : " + CalendarApp.choosenDate);

        this.setResizable(false);
        this.setLocation(750, 0);

        //CheckBox lardan sadece birinin seçili olması için
        buttonGroup1.add(chckbxAnniversary);
        buttonGroup1.add(chckbxBirtday);
        buttonGroup1.add(chkbxEvent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        chkbxEvent = new javax.swing.JCheckBox();
        chckbxBirtday = new javax.swing.JCheckBox();
        chckbxAnniversary = new javax.swing.JCheckBox();
        txtEventName = new javax.swing.JTextField();
        timeFrom = new javax.swing.JButton();
        timeTo = new javax.swing.JButton();
        chcbxAllDay = new javax.swing.JCheckBox();
        txtLoc = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescp = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        btnDone = new javax.swing.JButton();
        cmbColor = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cmbReminder = new javax.swing.JComboBox();
        chDate = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chkbxEvent.setText("Event");
        chkbxEvent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkbxEventActionPerformed(evt);
            }
        });

        chckbxBirtday.setText("Birtday");
        chckbxBirtday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chckbxBirtdayActionPerformed(evt);
            }
        });

        chckbxAnniversary.setText("Anniversary");
        chckbxAnniversary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chckbxAnniversaryActionPerformed(evt);
            }
        });

        txtEventName.setText("...Event Name");
        txtEventName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEventNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEventNameFocusLost(evt);
            }
        });

        timeFrom.setText("Time From");
        timeFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeFromActionPerformed(evt);
            }
        });

        timeTo.setText(" Time To");
        timeTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timeToActionPerformed(evt);
            }
        });

        chcbxAllDay.setText("All Day");
        chcbxAllDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chcbxAllDayActionPerformed(evt);
            }
        });

        txtLoc.setText("...Location");
        txtLoc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLocFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLocFocusLost(evt);
            }
        });

        txtDescp.setColumns(20);
        txtDescp.setRows(5);
        txtDescp.setText("...Description");
        txtDescp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDescpFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDescpFocusLost(evt);
            }
        });
        jScrollPane2.setViewportView(txtDescp);

        jLabel1.setText("Add Reminder =>");

        btnDone.setText("Done");
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        cmbColor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Red", "Blue", "Green", "Grey" }));
        cmbColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbColorActionPerformed(evt);
            }
        });

        jLabel2.setText("Choose Color =>");

        cmbReminder.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "1 Hour Before", "2 Hour Before", "1 Day Before", "2 Day Before", "1 Week Before" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(chDate, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(110, 110, 110))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28)
                                .addComponent(cmbReminder, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtEventName, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(chcbxAllDay)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(chkbxEvent)
                                    .addGap(18, 18, 18)
                                    .addComponent(chckbxBirtday)
                                    .addGap(18, 18, 18)
                                    .addComponent(chckbxAnniversary))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(27, 27, 27)
                                    .addComponent(timeFrom)
                                    .addGap(18, 18, 18)
                                    .addComponent(timeTo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbColor, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(txtLoc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnDone)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkbxEvent)
                    .addComponent(chckbxBirtday)
                    .addComponent(chckbxAnniversary))
                .addGap(9, 9, 9)
                .addComponent(txtEventName, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chcbxAllDay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timeTo)
                    .addComponent(timeFrom))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbReminder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDone)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void addToData() throws IOException {
        
        if (chcbxAllDay.isSelected()) {
            allday = true;
            timefrom = "-";
            timeto = "-";
        } else {
            allday = false;
            if (timefrom.equals("") || timeto.equals("")) {
                JOptionPane.showMessageDialog(this, "Please log in properly", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (txtLoc.equals("...Location")){
            txtLoc.setText("-");
        }
        File f = new File("Agenda.txt");
        FileWriter fw = new FileWriter(f, true);
        BufferedWriter bw = new BufferedWriter(fw);

        long id = 0;
        Random generator = new Random();
        id = generator.nextInt(99999999) + 1;

        int yıl = Integer.parseInt(CalendarApp.choosenDate.substring(CalendarApp.choosenDate.length() - 2, CalendarApp.choosenDate.length()));

        if (chkbxEvent.isSelected()) {
            bw.write(LINE_SEP + id + ",   " + "Event" + ",   " + txtEventName.getText().toString() + ",   " + CalendarApp.choosenDate + ",   " + allday + ",   " + timefrom + ",   " + timeto + ",   " + cmbColor.getSelectedItem().toString()
                    + ",   " + txtLoc.getText().toString() + ",   " + txtDescp.getText().toString() + ",   " + cmbReminder.getSelectedItem().toString());
            bw.close();
            System.out.println("Event eklendi");
        } else if (chckbxBirtday.isSelected()) {
            for (yıl = 17; yıl <= 27; yıl++) {
                id = generator.nextInt(99999999) + 1;
                CalendarApp.choosenDate = CalendarApp.choosenDate.substring(0, CalendarApp.choosenDate.length() - 2) + yıl;
                bw.write(LINE_SEP + id + ",   " + "Birtday" + ",   " + txtEventName.getText().toString() + ",   " + CalendarApp.choosenDate + ",   " + allday + ",   " + timefrom + ",   " + timeto + ",   " + cmbColor.getSelectedItem().toString()
                        + ",   " + "" + ",   " + txtDescp.getText().toString() + ",   " + cmbReminder.getSelectedItem().toString());
            }

            bw.close();

            System.out.println("Birtdayler eklendi");
        } else if (chckbxAnniversary.isSelected()) {
            for (yıl = 17; yıl <= 27; yıl++) {
                id = generator.nextInt(99999999) + 1;
                CalendarApp.choosenDate = CalendarApp.choosenDate.substring(0, CalendarApp.choosenDate.length() - 2) + yıl;
                bw.write(LINE_SEP + id + ",   " + "Anniversary" + ",   " + txtEventName.getText().toString() + ",   " + CalendarApp.choosenDate + ",   " + allday + ",   " + timefrom + ",   " + timeto + ",   " + cmbColor.getSelectedItem().toString()
                        + ",   " + txtLoc.getText().toString() + ",   " + txtDescp.getText().toString() + ",   " + cmbReminder.getSelectedItem().toString());
            }
            bw.close();
            System.out.println("Anniversaryler eklendi");
        }

    }

    private void timeFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeFromActionPerformed
       // timefrom = (String)JOptionPane.showInputDialog(this, "Please log in to the appropriate format => Example -> 12:45 , 03:30", "Enter time from...", JOptionPane.INFORMATION_MESSAGE,null,null,CalendarApp.choosenDate+",");
        timefrom = JOptionPane.showInputDialog(this, "Please log in to the appropriate format =>Example : 13:45 or 03:30", "Enter time from...", JOptionPane.INFORMATION_MESSAGE);
        int h = 0, m = 0;
        if (timefrom.length() == 5) {
            hourf = timefrom.substring(0, 2);
            minf = timefrom.substring(3, 5);
            h = Integer.parseInt(hourf);
            m = Integer.parseInt(minf);
            System.out.println(h + " : " + m);
        } else if (timefrom.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please log in", "Null Exp", JOptionPane.ERROR_MESSAGE);
        } else {
            if (m > 60) {
                JOptionPane.showMessageDialog(this, "Minute value cannot be bigger than 60", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (h > 24) {
                JOptionPane.showMessageDialog(this, "Hour value cannot be bigger than 24", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Please log in to the appropriate format", "Incorrect format", JOptionPane.ERROR_MESSAGE);
                timeto = "-";
            }
        }

    }//GEN-LAST:event_timeFromActionPerformed

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed

        if (chkbxEvent.isSelected() || chckbxBirtday.isSelected() || chckbxAnniversary.isSelected()) {
            if (!txtEventName.getText().equals("...Event Name")) {
                
                try {
                    addToData();
                    CalendarApp.readAgenda();
                    File f = new File(CalendarApp.txtName);
                    FileWriter fw = new FileWriter(f, true);
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(" ");
                } catch (IOException ex) {
                    Logger.getLogger(EventPopUp.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.dispose();
                isOpen = false;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please log in properly", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnDoneActionPerformed

    private void txtDescpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescpFocusLost
        // TODO add your handling code here:
        if (txtDescp.getText().equals("")) {
            txtDescp.setText("...Description");
        }
    }//GEN-LAST:event_txtDescpFocusLost

    private void txtEventNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEventNameFocusLost
        // TODO add your handling code here:
        if (txtEventName.getText().equals("")) {
            txtEventName.setText("...Event Name");
        }
    }//GEN-LAST:event_txtEventNameFocusLost

    private void txtLocFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLocFocusLost
        // TODO add your handling code here:
        if (txtLoc.getText().equals("")) {
            txtLoc.setText("...Location");
        }
    }//GEN-LAST:event_txtLocFocusLost

    private void chcbxAllDayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chcbxAllDayActionPerformed
        // TODO add your handling code here:
        if (chcbxAllDay.isSelected()) {
            timeFrom.setEnabled(false);
            timeTo.setEnabled(false);
        } else {
            timeFrom.setEnabled(true);
            timeTo.setEnabled(true);
        }
    }//GEN-LAST:event_chcbxAllDayActionPerformed

    private void txtEventNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEventNameFocusGained
        // TODO add your handling code here:
        if (txtEventName.getText().equals("...Event Name")) {
            txtEventName.setText("");
        }
    }//GEN-LAST:event_txtEventNameFocusGained

    private void txtLocFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLocFocusGained
        // TODO add your handling code here:
        if (txtLoc.getText().equals("...Location")) {
            txtLoc.setText("");
        }
    }//GEN-LAST:event_txtLocFocusGained

    private void txtDescpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescpFocusGained
        // TODO add your handling code here:
        if (txtDescp.getText().equals("...Description")) {
            txtDescp.setText("");
        }
    }//GEN-LAST:event_txtDescpFocusGained

    private void chckbxAnniversaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chckbxAnniversaryActionPerformed
        // TODO add your handling code here:
        if (chckbxAnniversary.isSelected()) {
            chcbxAllDay.setSelected(true);
            chcbxAllDay.setEnabled(false);
            timeFrom.setEnabled(false);
            timeTo.setEnabled(false);
            txtLoc.setEnabled(false);
        }
    }//GEN-LAST:event_chckbxAnniversaryActionPerformed

    private void chckbxBirtdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chckbxBirtdayActionPerformed
        // TODO add your handling code here:
        if (chckbxBirtday.isSelected()) {
            chcbxAllDay.setSelected(true);
            chcbxAllDay.setEnabled(false);
            timeFrom.setEnabled(false);
            timeTo.setEnabled(false);
            txtLoc.setEnabled(false);
        }
    }//GEN-LAST:event_chckbxBirtdayActionPerformed

    private void chkbxEventActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkbxEventActionPerformed
        // TODO add your handling code here:
        if (chkbxEvent.isSelected()) {
            chcbxAllDay.setSelected(false);
            chcbxAllDay.setEnabled(true);
            timeFrom.setEnabled(true);
            timeTo.setEnabled(true);
            txtLoc.setEnabled(true);
        }
    }//GEN-LAST:event_chkbxEventActionPerformed

    private void timeToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timeToActionPerformed
        int h = 0, m = 0;
        //timeto = (String)JOptionPane.showInputDialog(this, "Please log in to the appropriate format => Example -> 12:45 ,03:30", "Enter time from...", JOptionPane.INFORMATION_MESSAGE,null,null,CalendarApp.choosenDate+",");
        timeto = JOptionPane.showInputDialog(this, "Please log in to the appropriate format =>Example : 13:45 or 03:30", "Enter time from...", JOptionPane.INFORMATION_MESSAGE);
        if (timeto.length() == 5) {
            hour2 = timefrom.substring(0, 2);
            min2 = timefrom.substring(3, 5);
            h = Integer.parseInt(hourf);
            m = Integer.parseInt(minf);
            System.out.println(h + " : " + m);
        } else if (timeto.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please log in", "Null Exp", JOptionPane.ERROR_MESSAGE);
        } else {
            if (m > 60) {
                JOptionPane.showMessageDialog(this, "Minute value cannot be bigger than 60", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (h > 24) {
                JOptionPane.showMessageDialog(this, "Hour value cannot be bigger than 24", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Please log in to the appropriate format", "Incorrect format", JOptionPane.ERROR_MESSAGE);
                timeto = "-";
            }
        }
    }//GEN-LAST:event_timeToActionPerformed

    private void cmbColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbColorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EventPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EventPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EventPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EventPopUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EventPopUp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDone;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel chDate;
    private javax.swing.JCheckBox chcbxAllDay;
    private javax.swing.JCheckBox chckbxAnniversary;
    private javax.swing.JCheckBox chckbxBirtday;
    private javax.swing.JCheckBox chkbxEvent;
    private javax.swing.JComboBox cmbColor;
    private javax.swing.JComboBox cmbReminder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton timeFrom;
    private javax.swing.JButton timeTo;
    private javax.swing.JTextArea txtDescp;
    private javax.swing.JTextField txtEventName;
    private javax.swing.JTextField txtLoc;
    // End of variables declaration//GEN-END:variables
}
